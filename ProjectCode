# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""

import pandas as pd
from matplotlib import pyplot as plt
import numpy as np
import re
import matplotlib as mpl

df = pd.read_csv("/Users/owner/Documents/MAP4112PROJ/raw_total_fight_data22.csv")
#print(df.head())

df = df.drop(['Fight_type'], axis=1)
df = df.drop(['location'], axis=1)
df = df.drop(['date'], axis=1)
df = df.drop(['Referee'], axis=1)
df = df.drop(['Format'], axis=1)
df = df.drop(['last_round_time'], axis=1)
df = df.drop(['last_round'], axis=1)
df = df.drop(['win_by'], axis=1)

df = df.dropna()

df.Winner[df.Winner == df.R_fighter] = 0
df.Winner[df.Winner == df.B_fighter] = 1

df = df.drop(['R_fighter'], axis=1)
df = df.drop(['B_fighter'], axis=1)


df['R_SIG_STR.'] = df['R_SIG_STR.'].astype('str')
df['R_SIG_STR.'] = df['R_SIG_STR.'].str.split('\s+').str[0]
df['R_SIG_STR.'] = df['R_SIG_STR.'].astype('int')

df['B_SIG_STR.'] = df['B_SIG_STR.'].astype('str')
df['B_SIG_STR.'] = df['B_SIG_STR.'].str.split('\s+').str[0]
df['B_SIG_STR.'] = df['B_SIG_STR.'].astype('int')

df['R_TOTAL_STR.'] = df['R_TOTAL_STR.'].astype('str')
df['R_TOTAL_STR.'] = df['R_TOTAL_STR.'].str.split('\s+').str[0]
df['R_TOTAL_STR.'] = df['R_TOTAL_STR.'].astype('int')

df['B_TOTAL_STR.'] = df['B_TOTAL_STR.'].astype('str')
df['B_TOTAL_STR.'] = df['B_TOTAL_STR.'].str.split('\s+').str[0]
df['B_TOTAL_STR.'] = df['B_TOTAL_STR.'].astype('int')

df['R_TD'] = df['R_TD'].astype('str')
df['R_TD'] = df['R_TD'].str.split('\s+').str[0]
df['R_TD'] = df['R_TD'].astype('int')

df['B_TD'] = df['B_TD'].astype('str')
df['B_TD'] = df['B_TD'].str.split('\s+').str[0]
df['B_TD'] = df['B_TD'].astype('int')

df['R_HEAD'] = df['R_HEAD'].astype('str')
df['R_HEAD'] = df['R_HEAD'].str.split('\s+').str[0]
df['R_HEAD'] = df['R_HEAD'].astype('int')

df['B_HEAD'] = df['B_HEAD'].astype('str')
df['B_HEAD'] = df['B_HEAD'].str.split('\s+').str[0]
df['B_HEAD'] = df['B_HEAD'].astype('int')

df['R_BODY'] = df['R_BODY'].astype('str')
df['R_BODY'] = df['R_BODY'].str.split('\s+').str[0]
df['R_BODY'] = df['R_BODY'].astype('int')

df['B_BODY'] = df['B_BODY'].astype('str')
df['B_BODY'] = df['B_BODY'].str.split('\s+').str[0]
df['B_BODY'] = df['B_BODY'].astype('int')

df['R_LEG'] = df['R_LEG'].astype('str')
df['R_LEG'] = df['R_LEG'].str.split('\s+').str[0]
df['R_LEG'] = df['R_LEG'].astype('int')

df['B_LEG'] = df['B_LEG'].astype('str')
df['B_LEG'] = df['B_LEG'].str.split('\s+').str[0]
df['B_LEG'] = df['B_LEG'].astype('int')

df['R_DISTANCE'] = df['R_DISTANCE'].astype('str')
df['R_DISTANCE'] = df['R_DISTANCE'].str.split('\s+').str[0]
df['R_DISTANCE'] = df['R_DISTANCE'].astype('int')

df['B_DISTANCE'] = df['B_DISTANCE'].astype('str')
df['B_DISTANCE'] = df['B_DISTANCE'].str.split('\s+').str[0]
df['B_DISTANCE'] = df['B_DISTANCE'].astype('int')

df['R_CLINCH'] = df['R_CLINCH'].astype('str')
df['R_CLINCH'] = df['R_CLINCH'].str.split('\s+').str[0]
df['R_CLINCH'] = df['R_CLINCH'].astype('int')

df['B_CLINCH'] = df['B_CLINCH'].astype('str')
df['B_CLINCH'] = df['B_CLINCH'].str.split('\s+').str[0]
df['B_CLINCH'] = df['B_CLINCH'].astype('int')

df['R_GROUND'] = df['R_GROUND'].astype('str')
df['R_GROUND'] = df['R_GROUND'].str.split('\s+').str[0]
df['R_GROUND'] = df['R_GROUND'].astype('int')

df['B_GROUND'] = df['B_GROUND'].astype('str')
df['B_GROUND'] = df['B_GROUND'].str.split('\s+').str[0]
df['B_GROUND'] = df['B_GROUND'].astype('int')

df['R_SIG_STR_pct'] = df['R_SIG_STR_pct'].astype('str')
df['R_SIG_STR_pct'] = df['R_SIG_STR_pct'].str.rstrip('%')
df['R_SIG_STR_pct'] = df['R_SIG_STR_pct'].astype('int')

df['B_SIG_STR_pct'] = df['B_SIG_STR_pct'].astype('str')
df['B_SIG_STR_pct'] = df['B_SIG_STR_pct'].str.rstrip('%')
df['B_SIG_STR_pct'] = df['B_SIG_STR_pct'].astype('int')

df['R_TD_pct'] = df['R_TD_pct'].astype('str')
df['R_TD_pct'] = df['R_TD_pct'].str.rstrip('%')
df['R_TD_pct'] = df['R_TD_pct'].astype('int')

df['B_TD_pct'] = df['B_TD_pct'].astype('str')
df['B_TD_pct'] = df['B_TD_pct'].str.rstrip('%')
df['B_TD_pct'] = df['B_TD_pct'].astype('int')



Y = df['Winner'].values
Y = Y.astype('int')

X = df.drop(labels=['Winner'], axis=1)


from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25, random_state=20)

from sklearn.ensemble import RandomForestClassifier

model = RandomForestClassifier(n_estimators = 200, random_state=24)

model.fit(X_train, Y_train)

prediction_test = model.predict(X_test)

from sklearn import metrics
print("Accuracy = ", metrics.accuracy_score(Y_test, prediction_test))


# from sklearn.metrics import roc_curve, auc

#false_positive_rate, true_positive_rate, thresholds = roc_curve(Y_test, prediction_test)
#roc_auc = auc(false_positive_rate, true_positive_rate)

# n_estimators = [1, 2, 4, 8, 16, 32, 64, 100, 200, 500, 1000]
# train_results = []
# test_results = []

# for estimator in n_estimators:
#     model = RandomForestClassifier(n_estimators=estimator, n_jobs=-1)
#     model.fit(X_train, Y_train)
#     train_pred = model.predict(X_train)
#     false_positive_rate, true_positive_rate, thresholds = roc_curve(Y_train, train_pred)
#     roc_auc = auc(false_positive_rate, true_positive_rate)
#     train_results.append(roc_auc)
#     prediction_test = model.predict(X_test)
#     false_positive_rate, true_positive_rate, thresholds = roc_curve(Y_test, prediction_test)
#     roc_auc = auc(false_positive_rate, true_positive_rate)
#     test_results.append(roc_auc)
    

# from matplotlib.legend_handler import HandlerLine2D
# line1, = plt.plot(n_estimators, train_results, "b", label="Train AUC")
# line2, = plt.plot(n_estimators, test_results, "r", label="Test AUC")
# plt.legend(handler_map={line1: HandlerLine2D(numpoints=2)})
# plt.ylabel("AUC score")
# plt.xlabel("n_estimators")
# plt.show()

feature_list = list(X.columns)
feature_imp = pd.Series(model.feature_importances_, index=feature_list).sort_values(ascending=True)
print(feature_imp)


print(df.head())
